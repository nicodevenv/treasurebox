<?php

namespace App\Tests\Service;

use App\Entities\AdventurerOption;
use App\Entities\Map;
use App\Entities\MountainOption;
use App\Entities\TreasureOption;
use App\Service\AdventurerService;
use App\Service\MapService;
use App\Tests\AbstractTestCase;

class MapServiceTest extends AbstractTestCase {
    /** @var  MapService */
    private $subject;

    /** @var  Map */
    private $map;

    /** @var  AdventurerOption */
    private $adventurer;

    public function setUp()
    {
        $adventurerService = new AdventurerService();

        $this->subject = new MapService($adventurerService);

        $this->map = new Map(5, 5);

        $adventurerData = [
            'x' => 1,
            'y' => 1,
            'direction' => 'N',
            'actions' => 'A',
            'name' => 'Nicolas',
        ];
        $this->adventurer = new AdventurerOption($adventurerData, $this->map);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testIsAdventurerMovable()
    {
        // Nothing on map
        $this->adventurer->setDirection('N');
        $this->assertTrue($this->subject->isAdventurerMovable($this->map, $this->adventurer));

        // Treasure on North
        $treasureData = [
            'x' => 1,
            'y' => 0,
            'counter' => 1
        ];
        $treasure = new TreasureOption($treasureData, $this->map);
        $this->map->addOption($treasure);
        $this->map->removeOption($treasure, 0);
        $this->assertTrue($this->subject->isAdventurerMovable($this->map, $this->adventurer));

        // Mountain on North
        $mountainData = [
            'x' => 1,
            'y' => 0,
        ];
        $mountain = new MountainOption($mountainData);
        $this->map->addOption($mountain);
        $this->assertFalse($this->subject->isAdventurerMovable($this->map, $this->adventurer));
        $this->map->removeOption($mountain, 0);

        // Cannot go out of the map on Y position < 0
        $this->adventurer->setY(0);
        $this->assertFalse($this->subject->isAdventurerMovable($this->map, $this->adventurer));

        // Cannot go out of the map on X position < 0
        $this->adventurer->setDirection('O');
        $this->adventurer->setX(0);
        $this->assertFalse($this->subject->isAdventurerMovable($this->map, $this->adventurer));

        // Cannot go out of the map on Y position > mapMax
        $this->adventurer->setY(4);
        $this->assertFalse($this->subject->isAdventurerMovable($this->map, $this->adventurer));

        // Cannot go out of the map on X position > mapMax
        $this->adventurer->setDirection('E');
        $this->adventurer->setX(4);
        $this->assertFalse($this->subject->isAdventurerMovable($this->map, $this->adventurer));
    }

    public function testIsObstacleHere()
    {
        // Nothing on map
        $this->assertFalse($this->subject->isObstacleHere($this->map, 1, 1));

        // Treasure on North
        $treasureData = [
            'x' => 1,
            'y' => 1,
            'counter' => 1
        ];
        $treasure = new TreasureOption($treasureData, $this->map);
        $this->map->addOption($treasure);
        $this->map->removeOption($treasure, 0);
        $this->assertFalse($this->subject->isObstacleHere($this->map, 1, 1));

        // Mountain on North
        $mountainData = [
            'x' => 1,
            'y' => 1,
        ];
        $mountain = new MountainOption($mountainData);
        $this->map->addOption($mountain);
        $this->assertTrue($this->subject->isObstacleHere($this->map, 1, 1));
        $this->map->removeOption($mountain, 0);
    }

    public function testRemoveOption()
    {
        // Treasure on North
        $treasureData = [
            'x' => 1,
            'y' => 1,
            'counter' => 1
        ];
        $treasure = new TreasureOption($treasureData, $this->map);
        $this->map->addOption($treasure);

        if (count($this->map->getMapFrames()[1][1]) > 0) {
            $this->subject->removeOption($this->map, $treasure);
            $this->assertEquals(0, count($this->map->getMapFrames()[1][1]));
        }
    }

    public function moveAdventurerProvider()
    {
        return [
            ['N', 1, 0],
            ['S', 1, 2],
            ['E', 2, 1],
            ['O', 0, 1],
        ];
    }

    /**
     * @dataProvider moveAdventurerProvider
     */
    public function testMoveAdventurer($direction, $attemptedX, $attemptedY)
    {
        $this->adventurer->setDirection($direction);
        $this->subject->moveAdventurer($this->map,$this->adventurer);

        $this->assertEquals($attemptedX, $this->adventurer->getX());
        $this->assertEquals($attemptedY, $this->adventurer->getY());
    }

    public function testCollectSomething()
    {
        // Treasure on North
        $treasureData = [
            'x' => 1,
            'y' => 1,
            'counter' => 1
        ];
        $treasure = new TreasureOption($treasureData, $this->map);
        $this->map->addOption($treasure);

        $this->invokeMethod($this->subject, 'collectSomething', [$this->map, $this->adventurer]);

        $this->assertTrue(count($this->adventurer->getTreasures()) > 0);
    }

    public function testGetLongestCharCount()
    {
        $counter = $this->subject->getLongestCharCount([$this->adventurer]);

        $this->assertEquals(11, $counter);
    }

    public function testDisplayMap()
    {
        $this->map->addOption($this->adventurer);

        $str = $this->subject->displayMap($this->map, $this->subject->getLongestCharCount([$this->adventurer]));
        $attempted = ".           .           .           .           .           \n";
        $attempted .= ".           A(Nicolas)  .           .           .           \n";
        $attempted .= ".           .           .           .           .           \n";
        $attempted .= ".           .           .           .           .           \n";
        $attempted .= ".           .           .           .           .           \n";

        $this->assertEquals($attempted, $str);
    }

    public function testAddOption()
    {
        // Treasure on North
        $treasureData = [
            'x' => 1,
            'y' => 1,
            'counter' => 1
        ];
        $treasure = new TreasureOption($treasureData, $this->map);
        $this->subject->addOption($this->map, $treasure, false);

        $this->expectException(\Exception::class);
        $this->subject->addOption($this->map, $this->adventurer, false);
    }
}